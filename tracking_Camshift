#include "opencv2/core/core.hpp"
#include "opencv2/video/tracking.hpp"
#include "opencv2/contrib/contrib.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/nonfree/features2d.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/opencv.hpp"
#include <stdio.h>
#include <cmath>
#include <iostream>
#include <ctype.h>
#include <fstream>
#include <sstream>

#define frame_inicio 930
#define frame_final 1150
#define PATH_RGB "/imatge/gcordova/workspace/opencv/GRABACION/CAMARA1/image/seq_"
#define PATH_DEPTH "/imatge/gcordova/workspace/opencv/GRABACION/CAMARA1/depth/seq_"

#define ANGULO_ROTACION -90


//----------------------definir variables a,b (aplicados en del depth)------------------------------------------
#define a 100 //a pasado la puerta
#define b 0 //fuera de la sala


using namespace std;
using namespace cv;

/** Function Headers */


Mat rotate(Mat src, double angle);
double angle(cv::Point pt1, cv::Point pt2, cv::Point pt0);

/** Global variables */

 struct datos {
	int frame;

 };


cv::Rect roi2;
RNG rng(12345);

double angle(cv::Point pt1, cv::Point pt2, cv::Point pt0)
{
	double dx1 = pt1.x - pt0.x;
	double dy1 = pt1.y - pt0.y;
	double dx2 = pt2.x - pt0.x;
	double dy2 = pt2.y - pt0.y;
	return (dx1*dx2 + dy1*dy2) / sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2 + dy2*dy2) + 1e-10);
}
Mat rotate(Mat src, double angle)
{

    Mat rot;
    Point2f center(src.cols/2.0, src.rows/2.0);
    Mat r = getRotationMatrix2D(center, angle, 1.0);
    cv::Rect bbox = cv::RotatedRect(center,src.size(), angle).boundingRect();
    // adjust transformation matrix
    r.at<double>(0,2) += bbox.width/2.0 - center.x;
    r.at<double>(1,2) += bbox.height/2.0 - center.y;
    warpAffine(src, rot, r, bbox.size());
    return rot;

}


int trackObject = 0;
Rect selection;
Rect trackWindow;
int hsize = 16;
float hranges[] = {0,180};
const float* phranges = hranges;
int matchesNum = 0;
Mat result , hsv, hue, hist, mask, backproj;
Mat cimg;

 /*funcion main */
 int main( int argc, const char** argv )
 {

	vector<datos> media;
	datos dato;
	if( argc != 1)
	{
		cout <<" Usage: display_image ImageToLoadAndDisplay" << endl;
		return -1;
	}
//---------------------------------------------------------------------------------------------------
// Carga de imagenes
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//Declarar variables
//S&G utilización de BackgroundSubtractorMOG
//---------------------------------------------------------------------------------------------------
		Mat fgMask, maskdepth, maskmedia;
		cv::BackgroundSubtractorMOG mog;
//--------------------------------------------------------------------------------------------------
	Mat image, image_depth;
	  vector<vector<Point> > contours;
	  vector<Vec4i> hierarchy;



	for(int i=frame_inicio;i< frame_final; i++)
	{
		dato.frame = i; // cargar UNA imagen de la carpeta en imgname y completa la ruta
		string imgname=PATH_RGB;
		char cbuff[20];
		sprintf (cbuff, "%06d", i); //variar los 6 ceros
		imgname.append(cbuff);
		imgname.append(".png");
		image = imread(imgname , CV_LOAD_IMAGE_COLOR);   // lee la imagen
//---------------------------------------------------------------------------------------------------
// Carga de imagenes depth
//---------------------------------------------------------------------------------------------------
		string imgname2= PATH_DEPTH;
		imgname2.append(cbuff);
		imgname2.append(".png");
		image_depth = imread(imgname2 ,  CV_LOAD_IMAGE_ANYCOLOR | CV_LOAD_IMAGE_ANYDEPTH);   // lee la imagen

//---------------------------------------------------------------------------------------------------
// inicio del Pre Procesado
//---------------------------------------------------------------------------------------------------
		      if( !image.empty() && !image_depth.empty())
			{
				Mat rot, rot_depth;
				rot = rotate(image, ANGULO_ROTACION); // llamada de la funcion de rotacion de imagen
				image=rot;
//---------------------------------------------------------------------------------------------------
//inicio del Procesado
//S&G utilización de BackgroundSubtractorMOG
//---------------------------------------------------------------------------------------------------
				cout << "5(^.^)"<< std::endl ;
				Mat image2;
				image.convertTo(image2, -1, 1, 80); //alpha value [1.0-3.0]: 1 * beta value [0-100]: 50
				image=image2;
				Mat blurred(image);
				medianBlur(blurred, blurred, 5);

				mog(blurred, fgMask, 0);


//---------------------------------------------------------------------------------------------------
// Rotar el DEPTH
//---------------------------------------------------------------------------------------------------
				rot_depth=rotate(image_depth, ANGULO_ROTACION );
				image_depth=rot_depth;
//---------------------------------------------------------------------------------------------------
// Distancia DEPTH
//---------------------------------------------------------------------------------------------------
				double min;
				double max;
				cv::minMaxIdx(image_depth, &min, &max);
				cv::Mat adjMap,maskdepth, thmat;
				double thresh = a;
				double maxval = b;
				// Histogram Equalization
				float scale = 255 / (max-min);
				// expand your range to 0..255. Similar to histEq();
				image_depth.convertTo(adjMap,CV_8UC1,scale, -min*scale);
				adjMap.copyTo(maskdepth,fgMask);
//				double threshold(InputArray src, OutputArray dst, double thresh, double maxval, int type)
				threshold(maskdepth, thmat, thresh, maxval, THRESH_TOZERO_INV);

				/// Find contours
				findContours( thmat, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );

				/// Approximate contours to polygons + get bounding rects and circles
				vector<vector<Point> > contours_poly( contours.size() );
				vector<Rect> boundRect( contours.size() );
				vector<Point2f>center( contours.size() );
				vector<float>radius( contours.size() );

				for( unsigned int i = 0; i < contours.size(); i++ )
				 { approxPolyDP( Mat(contours[i]), contours_poly[i], 3, true );
				   boundRect[i] = boundingRect( Mat(contours_poly[i]) );
				   minEnclosingCircle( (Mat)contours_poly[i], center[i], radius[i] );
				 }


				/// Draw polygonal contour + bonding rects + circles
				Mat drawing = Mat::zeros( thmat.size(), CV_8UC1 );
				for(unsigned int i = 0; i< contours.size(); i++ )
				 {
				   Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
				   drawContours( drawing, contours_poly, i, color, 1, 8, vector<Vec4i>(), 0, Point() );
				   rectangle( drawing, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0 );
				   circle( drawing, center[i], (int)radius[i], color, 2, 8, 0 );
				 }

				/// Show in a window
				namedWindow( "Contours", CV_WINDOW_AUTOSIZE );
				imshow( "Contours", drawing );




				thmat.copyTo(result);

				if ( !trackObject )
				    {
				        Mat grayframe = result;
//				        vector <Rect> facesBuf; cambiado por boundRect
				        int detectionsNum = 0;

//				        cvtColor(result, grayframe, CV_BGR2GRAY);


				        detectionsNum = (int) boundRect.size();
				        Rect *detRects = &boundRect[0]; // faceRects cambiado por detRects

				        //It must found faces in three consecutives frames to start the tracking to discard false positives
				        if (detectionsNum > 0)
				            matchesNum += 1;
				        else matchesNum = 0;
				        if ( matchesNum == 3 )
				        {
				            trackObject = -1;
				            selection = detRects[0];
				        }

				        for (int i = 0; i < detectionsNum; i++)
				        {
				            Rect r = detRects[i];
				            rectangle(result, Point(r.x, r.y), Point(r.x + r.width, r.y + r.height), CV_RGB(0, 255, 0));
				        }
				    }

				 if( trackObject )
				    {
					 	cvtColor(thmat, cimg, CV_GRAY2RGB);
				        cvtColor(cimg, hsv, CV_RGB2HSV);
				        inRange(hsv, Scalar(0, 69, 53),
				                    Scalar(180, 256, 256), mask);
				        int ch[] = {0, 0};
				        hue.create(hsv.size(), hsv.depth());
				        mixChannels(&hsv, 1, &hue, 1, ch, 1);

				        if( trackObject < 0 )
				        {
				            Mat roi(hue, selection), maskroi(mask, selection);
				            calcHist(&roi, 1, 0, maskroi, hist, 1, &hsize, &phranges);
				            normalize(hist, hist, 0, 255, CV_MINMAX);

				            trackWindow = selection;
				            trackObject = 1;
				        }

	//			        cout << "antes del BP(^.^)"<< std::endl ;
				        calcBackProject(&hue, 1, 0, hist, backproj, &phranges);
				        backproj &= mask;

				        cout << "antes del CS(^.^)"<< std::endl ;
				        cout << "antes del size(^.^)"<< backproj.size() <<std::endl ;
//				        cout << "antes del CS(^.^)"<< trackWindow.size <<std::endl ;
				       // cout << "antes del CS(^.^)"<< std::endl ;
				        RotatedRect trackBox = CamShift(backproj, trackWindow,
				                TermCriteria( CV_TERMCRIT_EPS | CV_TERMCRIT_ITER, 10, 1 ));

				        cout << "despues del cS(^.^)"<< std::endl ;
				        if( trackWindow.area() <= 1 )
				        {
				            int cols = backproj.cols, rows = backproj.rows, r = (MIN(cols, rows) + 5)/6;
				            trackWindow = Rect(trackWindow.x - r, trackWindow.y - r,
				                    trackWindow.x + r, trackWindow.y + r) &
				                    Rect(0, 0, cols, rows);
				        }

				        ellipse( result, trackBox, Scalar(0,0,255), 3, CV_AA );
				    }


				    imshow( "Result", result );

				    if(waitKey(30) >= 0) break;


//-----------------------------------------------------------------------------------------------------
//Muestra la deccion   y la clasificacion
//-----------------------------------------------------------------------------------------------------
				string box_text_1 = format("frame = %d ", dato.frame);
				int pos_x1 = 50;
				int pos_y1 = 50;
				putText(adjMap, box_text_1, Point(pos_x1, pos_y1), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
				imshow("video capture", adjMap);
//				imshow("video capture DEPTH", image_depth); //para ver las detecciones

				cout << "4(^.^)"<< dato.frame<< std::endl ;
//-----------------------------------------------------------------------------------------------------
// con Esc PARO la reproduccion y con SPACE continuo
//-----------------------------------------------------------------------------------------------------
			if (waitKey(1) == 27)
				{// se puede cambiar en funcion de mi tiempo de procesado deberia bajarlo
					waitKey(0);
				}

			}
		    else
				{
					printf(" --(!) No imagen -- Break!");
				}
		}


//--------------------------------------------------------------------------------------------------------------------------------
	return 0;
}

//cout << "(^.^)"<< std::endl ;

